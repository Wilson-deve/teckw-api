// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  firstname String
  lastname  String
  username String  @unique
  email    String  @unique
  phone String  @unique
  avatarUrl String?
  password String
  role          Role      @default(USER)
  resetPasswordOtp String? @unique 
  resetPasswordOtpExpiry DateTime?
  refreshToken String? @unique
  active Boolean @default(true)
  // isVerified    Boolean   @default(false)
  address       Address[]
  reviews        Review[]
  orders         Order[]
  cart           Cart?
  wishlist       Wishlist?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("users")
}

enum Role {
  USER
  ADMIN
}


model Address {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactname  String
  phone        String
  phone2       String?
  province     String
  district     String
  sector       String
  street       String
  orders       Order[] 
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  logoUrl        String?
  description String?
  featured    Boolean   @default(false)
  categories  CategoryBrand[]
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CategoryBrand {
  id         String   @id @default(uuid())
  brandId    String
  categoryId String
  brand      Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([brandId, categoryId])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  imageUrl       String?
  brands      CategoryBrand[]
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String
  price       Decimal
  stock       Int @default(0)
  images      ProductImage[]
   brandId        String
  brand        Brand            @relation(fields: [brandId], references: [id])
  specifications Json?
  discount    Float?
  rating     Float? @default(0)
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  orderItems  OrderItem[]
  variations      ProductVariation[]
  colors          ProductColor[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  isMain    Boolean  @default(false)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariation {
  id          String    @id @default(cuid())
  productId   String
  price       Float
  stock       Int       @default(0)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes  VariationAttribute[]
}

model VariationAttribute {
  id          String    @id @default(cuid())
  variationId String
  name        String   
  value       String    
  variation   ProductVariation @relation(fields: [variationId], references: [id], onDelete: Cascade)
}

model ProductColor {
  id          String    @id @default(cuid())
  productId   String
  name        String    
  hexCode     String    
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  rating    Int     
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Wishlist {
  id        String         @id @default(uuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

   @@unique([wishlistId, productId])
}


model Order {
  id              String     @id @default(uuid())
  orderNumber     String     @unique
  status          OrderStatus @default(PENDING)
  total           Decimal
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  shippingAddressId String
  shippingAddress Address @relation(fields: [shippingAddressId], references: [id])
  userId          String
  user            User       @relation(fields: [userId], references: [id])
  items           OrderItem[]
  trackingNumber  String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  MOBILE_MONEY
  CREDIT_CARD
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  userId    String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum NotificationType {
  ORDER
  PROMOTION
  SYSTEM
}